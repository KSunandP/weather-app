{"version":3,"sources":["WeatherDashboard.js"],"names":[],"mappings":"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","file":"components.js","sourcesContent":["var WeatherDashboard = React.createClass({\n\n    propTypes: {\n        data: React.PropTypes.object.isRequired\n    },\n\n    getInitialState: function () {\n\n        return {\n            locationName: '',\n            conditionClass: '',\n            temperature: '',\n            humidity: '',\n            wind: '',\n            weatherCode: '',\n            sunset: '',\n            currentTime: '',\n            updated: false\n        };\n    },\n\n\n    componentDidMount: function() {\n\n        // Set the state of the component with updated data\n\n        var setData = function() {\n\n            var data = this.props.data;\n\n            this.setState({\n                locationName: data.openweathermap.name,\n                temperature: data.openweathermap.main.temp,\n                humidity: data.openweathermap.main.humidity,\n                wind: (data.openweathermap.wind.speed * 60 * 60) / 1000,\n                weatherCode: data.openweathermap.weather[0].id,\n                sunset: new Date(data.sunrise.results.sunset),\n                currentTime: new Date(),\n                updated: true\n            });\n\n            // Retrieve the band that the temperature fits into in the temperatureScale array of objects\n\n            var temperatureBand = CC.Weather.getTemperatureBand(this.state.temperature, CC.Weather.temperatureScale);\n\n            // Set appropriate body class based on temperature band\n\n            document.getElementsByTagName('BODY')[0].className = temperatureBand.className;\n\n        }.bind(this);\n\n        // Subscribe to the WeatherDataset event and fire off the setData function that will update the state of our component\n\n        PubSub.subscribe('WeatherDataSet', setData);\n\n    },\n\n    render: function() {\n\n        // Create a date object using the sunset timestamp in the response from the sunset api\n\n        var sunsetTime = this.state.sunset;\n\n        // Create a date object for the current date as indicated by the system clock\n\n        var currentTime = this.state.currentTime;\n\n        // Calculate whether it's currently later than sunset and infer that it's evening\n\n        var isEvening = currentTime > sunsetTime;\n\n        // Set a base prefix for the icon classes based on whether or not it's evening\n\n        var iconClassName = isEvening ? 'wi-owm-night-' : 'wi-owm-day-';\n\n        if (this.state.updated) {\n            return (\n                <section id=\"weather\">\n                    <header>\n                        <h1 id=\"location-name\">{this.state.locationName}</h1>\n                        <i className={'wi ' + iconClassName + this.state.weatherCode} id=\"condition\"></i>\n                    </header>\n                    <footer>\n                        <div id=\"temperature\">{Math.round(this.state.temperature)}&deg;</div>\n                        <div id=\"humidity-and-wind\">\n                            <div id=\"humidity\">\n                                <i className=\"wi wi-raindrop\"></i> { this.state.humidity + '%' }</div>\n                            <div id=\"wind\">\n                                <i className=\"wi wi-small-craft-advisory\"></i> { Math.round(this.state.wind) + 'km/h' }</div>\n                        </div>\n                    </footer>\n                </section>\n            )\n        } else {\n            return (\n                <section id=\"weather\">\n                </section>\n            )\n        }\n    }\n});\n\nweatherApp.value('WeatherDashboard', WeatherDashboard);"],"sourceRoot":"/source/"}