{"version":3,"sources":["ApplicationController.js"],"names":[],"mappings":"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","file":"controllers.js","sourcesContent":["(function() {\n\n    'use strict';\n\n    weatherApp.controller('ApplicationController', ['$scope', '$timeout', 'OpenWeatherMap', 'SunriseSunset', 'GoogleGeoLoc', ApplicationController]);\n\n    function ApplicationController($scope, $timeout, OpenWeatherMap, SunriseSunset, GoogleGeoLoc) {\n\n        $scope.location = {};\n\n        (function(CC) {\n            'use strict';\n\n            // Run the initial location checking\n\n            CC.Location.init();\n\n            /*\n             *   Populate the location model with some default data\n             *   This is used when navigator.geolocation is not available or access has been blocked\n             */\n\n\n            $scope.location.city = 'London';\n            $scope.location.country = 'GB';\n\n            // Set up a weather object that will be used to populate the react component\n\n            $scope.weather = {\n                sunrise: {},\n                openweathermap: {},\n                geoloc: {}\n            };\n\n            // Parameter objects to allow us to pass optional data to the $resource factories\n\n            $scope.sunriseParams = {};\n            $scope.openWeatherMapParams = {};\n\n\n            // Take the values of the location model, set a localstorage item and fire off the LocationUpdate event\n\n            $scope.submitLocation = function() {\n\n                var location = encodeURIComponent($scope.location.city + ', ' + $scope.location.country);\n\n                localStorage.setItem('location', location);\n\n                document.getElementById('location-prompt').style.display = 'none';\n\n                CC.Location.processLocation(location);\n\n            };\n\n            PubSub.subscribe('LocationUpdate', function() {\n\n                // Retrieve the location from the CC.Location object\n\n                var location = CC.Location.get();\n\n                /*\n                 *  If the location is a string, run it via Google's Geolocation API to retrieve the latitude & longitude\n                 */\n\n                if (typeof(location) === 'string') {\n\n                    GoogleGeoLoc.get({}, {'address': '&address=' + location}).$promise.then(function (data) {\n\n                        $scope.weather.geoloc = data.results[0].geometry.location;\n\n                        // Update the parameter objects\n\n                        $scope.sunriseParams.lat = '&lat=' + data.results[0].geometry.location.lat;\n                        $scope.sunriseParams.lon = '&lng=' + data.results[0].geometry.location.lng;\n\n                        $scope.openWeatherMapParams.lat = '&lat=' + data.results[0].geometry.location.lat;\n                        $scope.openWeatherMapParams.lon = '&lon=' + data.results[0].geometry.location.lng;\n\n                    });\n\n                } else {\n\n                    // Add the $scope.weather.geoloc to the event queue so that we have time to share our location\n\n                    $timeout(function() {\n\n                        $scope.weather.geoloc = {\n                            lat: location.coords.latitude,\n                            lng: location.coords.longitude\n                        };\n\n                    }, 0);\n\n                    // Update the parameter objects\n\n                    $scope.sunriseParams.lat = '&lat=' + location.coords.latitude;\n                    $scope.sunriseParams.lon = '&lng=' + location.coords.longitude;\n\n                    $scope.openWeatherMapParams.lat = '&lat=' + location.coords.latitude;\n                    $scope.openWeatherMapParams.lon = '&lon=' + location.coords.longitude;\n\n                }\n\n                // Listen for changes to the $scope.weather.geoloc object\n\n                $scope.$watch('weather.geoloc', function() {\n\n                    // Use the SunriseSunset factory with the updated parameters to retrieve the current sunset time\n\n                    SunriseSunset.getJSONP({}, $scope.sunriseParams).$promise.then(function(data) {\n                        $scope.weather.sunrise = data;\n\n                        // Publish an event once complete\n\n                        PubSub.publish('SunriseSunset');\n                    });\n\n\n                    // Fire off an event if both the SunriseSunset event\n                    PubSub.subscribe('SunriseSunset', function() {\n\n                        // Use the OpenWeatherMap factory with the updated parameters to retrieve your current location's weather information\n                        OpenWeatherMap.getJSONP({}, $scope.openWeatherMapParams).$promise.then(function(data) {\n\n                            $scope.weather.openweathermap = data;\n\n                            // Fire the WeatherDataSet event when we've updated our $scope.weather object\n                            PubSub.publish('WeatherDataSet', $scope.weather);\n                        });\n                    });\n\n                });\n\n\n            });\n\n\n\n\n        })(window.CC = window.CC || {})\n    }\n\n})();\n\n"],"sourceRoot":"/source/"}